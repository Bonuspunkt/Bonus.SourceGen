using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Bonus.SourceGen;

internal class ModuleSourceGeneration {
    public static string Create(ModuleInfo module) {
        var builder = new IndentedStringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#pragma warning disable 8019");
        builder.AppendUsings();
        builder.AppendLine("#pragma warning restore 8019");
        builder.AppendLine("#nullable enable");
        builder.AppendLine();

        builder.AppendNamespace(module);

        builder.AppendPartialClass(module);

        builder.AppendLine();

        builder.AppendModule(module);

        var source = builder.ToString();
        return source;
    }
}


internal static class IndentedStringBuilderExtensions {
    public static IndentedStringBuilder AppendUsings(this IndentedStringBuilder builder) {
        return builder
            .AppendLine("using Autofac;")
            .AppendLine("using Bonus.SourceGen;")
            .AppendLine("using System.Diagnostics;")
            .AppendLine("using System.Threading.Tasks;");
    }

    public static IndentedStringBuilder AppendNamespace(this IndentedStringBuilder builder, ModuleInfo module) {
        if (module.Namespace != default) {
            builder.AppendLine($"namespace {module.Namespace};");
        }

        return builder;
    }

    public static IndentedStringBuilder AppendPartialClass(this IndentedStringBuilder builder, ModuleInfo module) {
        var lastClass = module.Classes[^1];
        foreach (var @class in module.Classes) {
            builder.Append($"partial class {@class.Identifier} ");
            if (@class == lastClass && @class.Modifiers.All(modifier => !modifier.IsKind(SyntaxKind.StaticKeyword))) {
                builder.Append(": IRegisterADelegateModule ");
            }

            builder.AppendLine("{");
            builder.IncrementIndent();
        }

        builder.AppendLine("public static Autofac.Core.IModule DelegateModule { get; } = new Module();");

        foreach (var _ in module.Classes) {
            builder.DecrementIndent();
            builder.AppendLine("}");
        }

        return builder;
    }

    public static IndentedStringBuilder AppendModule(this IndentedStringBuilder builder, ModuleInfo module) {
        var classIdentifier = string.Join(".", module.Classes.Select(@class => @class.Identifier));

        builder.AppendLine("file class Module : Autofac.Module {");
        builder.IncrementIndent();

        builder.AppendLine("protected override void Load(ContainerBuilder builder) {");
        builder.IncrementIndent();

        foreach (var methodInfo in module.Methods) {
            var method = methodInfo.Method;
            builder.AppendLine($"builder.Register<{methodInfo.Delegate}>(ctx => {{");
            builder.IncrementIndent();

            foreach (var parameter in method.ParameterList.Parameters) {
                var type = parameter.Type;
                var name = parameter.Identifier;
                builder.AppendLine($"var {name} = ctx.Resolve<{type}>();");
            }

            builder.AppendRegistrationBody(classIdentifier, methodInfo);

            builder.DecrementIndent();
            builder.AppendLine("});");
        }

        builder.DecrementIndent();
        builder.AppendLine("}"); // /Load
        builder.DecrementIndent();
        builder.AppendLine("}"); // /Module
        return builder;
    }

    private static IndentedStringBuilder AppendRegistrationBody(this IndentedStringBuilder builder, string classIdentifier, MethodInfo methodInfo) {
        var method = methodInfo.Method;
        var parameterNames = method.ParameterList.Parameters.Select(parameter => parameter.Identifier);
        var fullMethodName = $"{classIdentifier}.{method.Identifier}";

        builder.AppendLine($"return {fullMethodName}({string.Join(", ", parameterNames)});");

        return builder;
    }

}
